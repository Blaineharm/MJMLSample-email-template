const fs = require('fs');
const path = require('path');
const mjml = require('mjml');

// Logging setup
const logDir = path.resolve(__dirname, './logs');
const logFile = path.join(logDir, 'BuildAllTemplateWithArgs_script.log');

if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// Function to log messages
function logMessage(message, isError = false) {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] ${message}\n`;
  fs.appendFileSync(logFile, logEntry, 'utf8');
  isError ? console.error(logEntry) : console.log(logEntry);
}

// Read command line arguments
const args = process.argv.slice(2);
let streamName = "";

logMessage('üöÄ Script started');

args.forEach((arg, index) => {
  if (arg.startsWith('--')) {
    const key = arg.slice(2);
    const value = args[index + 1];
    if (key === 'stream' && value) {
      streamName = value.trim();
    }
  }
});

// Validate input
if (!streamName) {
  logMessage('‚ùå Error: Missing required argument --stream <StreamName>', true);
  process.exit(1);
}

const streamDir = path.resolve(__dirname, `./src/streams/${streamName}`);

if (!fs.existsSync(streamDir)) {
  logMessage(`‚ùå Error: Stream folder not found: ${streamDir}`, true);
  process.exit(1);
}

logMessage(`üìÇ Processing stream: ${streamDir}`);

// Function to resolve <mj-include>
function resolveIncludes(content, basePath) {
  return content.replace(/<mj-include path="(.*?)"\s*\/?>/g, (match, includePath) => {
    const includeFilePath = path.resolve(basePath, includePath);
    if (fs.existsSync(includeFilePath)) {
      logMessage(`‚úÖ Included file: ${includeFilePath}`);
      return fs.readFileSync(includeFilePath, 'utf8');
    } else {
      logMessage(`‚ùå Error: Included file not found - ${includeFilePath}`, true);
      return `<!-- Failed to include: ${includeFilePath} -->`;
    }
  });
}

// Read all MJML files in the stream directory
fs.readdirSync(streamDir).forEach((file) => {
  if (file.endsWith('.mjml')) {
    const mjmlFilePath = path.join(streamDir, file);

    fs.readFile(mjmlFilePath, 'utf8', (err, mjmlContent) => {
      if (err) {
        logMessage(`‚ùå Error reading MJML file ${file}: ${err.message}`, true);
        return;
      }

      // Resolve includes
      let processedMjml = resolveIncludes(mjmlContent, streamDir);

      // Convert MJML to HTML
      const { html, errors } = mjml(processedMjml, { filePath: mjmlFilePath });

      if (errors.length > 0) {
        logMessage(`‚ùå MJML Conversion Errors in ${file}: ${JSON.stringify(errors, null, 2)}`, true);
        return;
      }

      logMessage(`‚úÖ MJML conversion successful for ${file}`);

      // Write to an HTML file
      const outputFilePath = mjmlFilePath.replace('.mjml', '.html');
      fs.writeFileSync(outputFilePath, html, 'utf8');

      logMessage(`‚úÖ Generated HTML: ${outputFilePath}`);
    });
  }
});

logMessage('üéâ All templates processed successfully.');
